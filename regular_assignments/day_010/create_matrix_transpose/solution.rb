class Solution
  def call
    solve([[1,2,3], [4,5,6], [7,8,9]]) # [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
    solve([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]) # [[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]]
    solve([[1,2,3,4], [5,6,7,8]]) # [[1, 5], [2, 6], [3, 7], [4, 8]]
    arr = [
      [21,62,16,44,55,100,16,86,29],
      [62,72,85,35,14,1,89,15,73],
      [42,44,30,56,25,52,61,23,54],
      [5,35,12,35,55,74,50,50,80],
      [2,65,65,82,26,36,66,60,1],
      [18,1,16,91,42,11,72,97,35],
      [23,57,9,28,13,44,40,47,98]
    ]
    solve(arr) # [[21, 62, 42, 5, 2, 18, 23], [62, 72, 44, 35, 65, 1, 57], [16, 85, 30, 12, 65, 16, 9], [44, 35, 56, 35, 82, 91, 28], [55, 14, 25, 55, 26, 42, 13], [100, 1, 52, 74, 36, 11, 44], [16, 89, 61, 50, 66, 72, 40], [86, 15, 23, 50, 60, 97, 47], [29, 73, 54, 80, 1, 35, 98]]
  end

  def solve(matrix)
    puts "Matrix: #{matrix}"
    rows = matrix.length
    columns = matrix[0].length
    if rows == columns
      row = 0
      while row < rows
        col = row+1
        while col < columns
          temp = matrix[row][col]
          matrix[row][col] = matrix[col][row]
          matrix[col][row] = temp
          col += 1
        end
        row += 1
      end
      matrix
    else
      transpose = []
      col = 0
      while col < columns
        row = 0
        new_row = []
        while row < rows
          new_row << matrix[row][col]
          row += 1
        end
        transpose << new_row
        col += 1
      end
      transpose
    end
  end
end

# puts '-' * 100
# Solution.new.solve([[1,2,3], [4,5,6], [7,8,9]])
# puts '-' * 100
# Solution.new.solve([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]])
# puts '-' * 100
# Solution.new.solve([[1,2,3,4], [5,6,7,8]])
# puts '-' * 100
# arr = [
#   [21,62,16,44,55,100,16,86,29],
#   [62,72,85,35,14,1,89,15,73],
#   [42,44,30,56,25,52,61,23,54],
#   [5,35,12,35,55,74,50,50,80],
#   [2,65,65,82,26,36,66,60,1],
#   [18,1,16,91,42,11,72,97,35],
#   [23,57,9,28,13,44,40,47,98]
# ]
# Solution.new.solve(arr)
